{
  "@id": "dtmi:digitaltwins:rec_3_3:core:Capability;1",
  "@type": "Interface",
  "contents": [
    {
      "@type": "Property",
      "description": {
        "en": "Time when a core:Capability's value was last updated (see core:lastValue)."
      },
      "displayName": {
        "en": "last value time"
      },
      "name": "lastValueTime",
      "schema": "dateTime",
      "writable": true
    },
    {
      "@type": "Property",
      "description": {
        "en": "The (optional) substance that a capability measures or interacts with; e.g., a TemperatureSensor can measure air temperature or water temperature, a Flow Demand Setpoint can be configured to control steam demand or chilled water demand, etc."
      },
      "displayName": {
        "en": "substance"
      },
      "name": "substance",
      "dtmi:dtdl:property:schema;2": {
        "@type": "Enum",
        "dtmi:dtdl:property:enumValues;2": [
          {
            "enumValue": "Water",
            "name": "Water"
          },
          {
            "enumValue": "Steam",
            "name": "Steam"
          },
          {
            "enumValue": "OutsideAir",
            "name": "OutsideAir"
          },
          {
            "enumValue": "MediumTemperatureHotWater",
            "name": "MediumTemperatureHotWater"
          },
          {
            "enumValue": "HotWater",
            "name": "HotWater"
          },
          {
            "enumValue": "HighTemperatureHotWater",
            "name": "HighTemperatureHotWater"
          },
          {
            "enumValue": "DomesticHotWater",
            "name": "DomesticHotWater"
          },
          {
            "enumValue": "DeionisedWater",
            "name": "DeionisedWater"
          },
          {
            "enumValue": "ChilledWater",
            "name": "ChilledWater"
          },
          {
            "enumValue": "Air",
            "name": "Air"
          }
        ],
        "valueSchema": "string"
      },
      "writable": true
    },
    {
      "@type": "Property",
      "description": {
        "en": "The (optional) capability position relative to the system or space that it interacts with. E.g., a water temperature sensor can be positioned on the supply or return flow, air humidity can be measured entering or leaving a system, etc."
      },
      "displayName": {
        "en": "position"
      },
      "name": "position",
      "dtmi:dtdl:property:schema;2": {
        "@type": "Enum",
        "dtmi:dtdl:property:enumValues;2": [
          {
            "enumValue": "Underfloor",
            "name": "Underfloor"
          },
          {
            "enumValue": "Supply",
            "name": "Supply"
          },
          {
            "enumValue": "Return",
            "name": "Return"
          },
          {
            "enumValue": "Outside",
            "name": "Outside"
          },
          {
            "enumValue": "Output",
            "name": "Output"
          },
          {
            "enumValue": "Leaving",
            "name": "Leaving"
          },
          {
            "enumValue": "Exhaust",
            "name": "Exhaust"
          },
          {
            "enumValue": "Entering",
            "name": "Entering"
          },
          {
            "enumValue": "Discharge",
            "name": "Discharge"
          },
          {
            "enumValue": "Differential",
            "name": "Differential"
          },
          {
            "enumValue": "Bypass",
            "name": "Bypass"
          }
        ],
        "valueSchema": "string"
      },
      "writable": true
    },
    {
      "@type": "Relationship",
      "description": {
        "en": "The coverage or impact area of a given Asset or Sensor/Actuator. For example: an air-treatment unit might serve several Rooms or a full Building. Note that Assets can also service one another, e.g., an air-treatment Asset might serve an air diffuser Asset. Inverse of: servedBy"
      },
      "displayName": {
        "en": "serves"
      },
      "name": "serves"
    },
    {
      "@type": "Relationship",
      "description": {
        "en": "The entity (Asset, Space, LogicalDevice, etc.) that has this Capability. Inverse of: hasCapability"
      },
      "displayName": {
        "en": "is capabilty of"
      },
      "name": "isCapabilityOf"
    },
    {
      "@type": "Property",
      "displayName": {
        "en": "External IDs"
      },
      "name": "externalIds",
      "dtmi:dtdl:property:schema;2": {
        "@type": "Map",
        "dtmi:dtdl:property:mapKey;2": {
          "name": "externalIdName",
          "schema": "string"
        },
        "dtmi:dtdl:property:mapValue;2": {
          "name": "externalIdValue",
          "schema": "string"
        }
      },
      "writable": true
    },
    {
      "@type": "Property",
      "displayName": {
        "en": "name"
      },
      "name": "name",
      "schema": "string",
      "writable": true
    }
  ],
  "description": {
    "en": "A Capability indicates the capacity of an entity, be it a Space, an Asset, or a Device, to produce or ingest data. This is roughly equivalent to the established Brick Schema and generic BMS term \"point\". Specific subclasses specialize this behaviour: Sensor entities harvest data from the real world, Actuator entities accept commands from a digital twin platform, and Parameter entities configure some capability or system."
  },
  "displayName": {
    "en": "Capability"
  },
  "@context": "dtmi:dtdl:context;2"
}